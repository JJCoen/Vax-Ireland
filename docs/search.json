[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Change in Mortality Rates for Ireland",
    "section": "",
    "text": "Figure 1. Deaths above average (2015-2019)\n\n\n\n\n\nFigure 2: Humanity Project deaths above average"
  },
  {
    "objectID": "index.html#number-of-deaths-above-average",
    "href": "index.html#number-of-deaths-above-average",
    "title": "Change in Mortality Rates for Ireland",
    "section": "",
    "text": "Figure 1. Deaths above average (2010-2019)"
  },
  {
    "objectID": "index.html#death-rate-difference-from-2019-baseline",
    "href": "index.html#death-rate-difference-from-2019-baseline",
    "title": "Change in Mortality Rates for Ireland",
    "section": "Death Rate Difference from 2019 Baseline",
    "text": "Death Rate Difference from 2019 Baseline\n\nCentral Statistics Office data\n\n\n\nFigure 2. Death Rate from Baseline, CSO\n\n\n\n\nEuroStat Mortality Data\nCSO population numbers and EuroStat mortality records.\n\n\n\nFigure 3. Death Rate from Baseline, EuroStat"
  },
  {
    "objectID": "index.html#death-rate-difference-from-linear-fit",
    "href": "index.html#death-rate-difference-from-linear-fit",
    "title": "Change in Mortality Rates for Ireland",
    "section": "Death Rate difference from Linear Fit",
    "text": "Death Rate difference from Linear Fit\n\nLinear Model Evaluation\n\n\n\nFigure 5. Scatter Plot and Linear Model Fit\n\n\n\n\n\nFigure 6. Death Rate, Linear Fit\n\n\n\n\n\nFigure 7. HP Death Rate from Linear Fit"
  },
  {
    "objectID": "transform.html",
    "href": "transform.html",
    "title": "Transform Population and Mortality Counts",
    "section": "",
    "text": "Ten age categories in use by CSO in mortality data:\n“0-4” “5-14” “15-24” “25-34” “35-44” “45-54” “55-64” “65-74” “75+” “Total”\n\n\n\n\n\n\nImport csv file giving numbers of persons by year of age for 2022. /n Transform to 5-year age categories\nsource(\"./scripts/get-census-IE.R\")\nsource(\"./scripts/transform-pop.R\")\n\n# The Census 2022 file, \"FY0068-Pop-2022.csv\", records population \n# by year of age.  All fields are character type.\npop22 &lt;- fread(\"./raw-data/FY006B-Pop-2022.csv\")\n# Convert to 5-year age categories\ncensus22 &lt;- get_census(pop22)\n\n# Convert 5-year categories to CSO groupings\n# Input data contains 17 five-year categories\npop22 &lt;- transform_pop(census22)\n\n# cleanup\nrm(census22)\n\n\n\n\n\n\n\nObtain source data for year 2016 population counts by single year of age. /n Transform to 5-year age categories\n# The Census 2016 file, \"CNA20-Pop-2016.csv\", records population \n# by year of age.  All fields are character type.\n\npop16 &lt;- fread(\"./raw-data/CNA20-Pop-2016.csv\")\n\ncensus16 &lt;- get_census(pop16)\n\n# Population counts are by 5-year categories\n# Convert age categories to HP grouping\n# Source data contains 17 categories\npop16 &lt;- transform_pop(census16)\n\n# cleanup\nrm(census16)\n\n\n\n\n\n\n\nObtain source data for year 2011 population counts by single year of age. /n Transform to 5-year age categories\n# The Census 2011 file, \"CD205-Pop-2016.csv\", records \n# population by year of age.  All fields are character type.\n\npop11 &lt;- fread(\"./raw-data/CD205-Pop-2011.csv\")\n\ncensus11 &lt;- get_census(pop11)\n\n# Population counts are by 5-year categories\n# Convert age categories to HP grouping\n# Source data contains 17 categories\npop11 &lt;- transform_pop(census11)\n\n# cleanup\nrm(census11)\n\n\n\n\n\n\n\n\n\n\nCode\nsource(\"./scripts/transform-pop-csv.R\")\n\npop_est_23 &lt;- fread(\"./raw-data/PEA01-Pop-Est-2023.csv\")|&gt; \n    clean_names() |&gt; \n    as.data.table()\n\n# Remove unused columns\npop_est_23[, c(\"statistic\", \"sex\", \"unit\") := NULL]\nsetnames(pop_est_23, \"value\", \"count\")\n\n# Convert count column to integer \n# First, remove commas\npop_est_23[, count := str_remove_all(count, \",\")]\npop_est_23[, count := as.numeric(count)][, count := count * 1000]\n\n# Convert year to numeric\npop_est_23[, year := as.numeric(year)]\n\npop23 &lt;- pop_est_23[, .(age_group, count)] |&gt; \n    transform_pop_csv()\n\n\n\n\n\n\n\nObtain source data for population estimates by age category for years 2015 to 2021. /n Record estimates in separate numeric vectors for each year\nsource(\"./scripts/transform-pop-est.R\")\n\n# The population estimates file, \"PEA01-Pop-Est-2015-2021.xlsx\", \n# records population by age category up to 85+.  \n\npop_est_15_21 &lt;- read_excel(\"./raw-data/PEA01-Pop-Est-2015-2021.xlsx\",\n                            range = \"A3:H24\") |&gt; \n    clean_names() |&gt; \n    as.data.table()\n\n# First two rows are empty\npop_est_15_21 &lt;- pop_est_15_21[3:21,][, age_cat := x1][, x1 := NULL]\n\n# \"x2015\" records counts in character form.\n# Convert to numeric\n# First remove comma\npop_est_15_21[, x2015 := str_remove_all(x2015, \",\")]\npop_est_15_21[, x2015 := as.numeric(x2015)]\n\npop15 &lt;- pop_est_15_21[, .(age_cat, x2015) ] |&gt; \n    setnames(\"x2015\", \"count\") |&gt; \n    transform_pop_est()\n\n# 2017\npop17 &lt;- pop_est_15_21[, .(age_cat, x2017_2) ] |&gt; \n    setnames(\"x2017_2\", \"count\") |&gt; \n    transform_pop_est()\n\n# 2018\npop18 &lt;- pop_est_15_21[, .(age_cat, x2018_2) ] |&gt; \n    setnames(\"x2018_2\", \"count\") |&gt; \n    transform_pop_est()\n\n# 2019\npop19 &lt;- pop_est_15_21[, .(age_cat, x2019_2) ] |&gt; \n    setnames(\"x2019_2\", \"count\") |&gt; \n    transform_pop_est()\n\n# 2020\npop20 &lt;- pop_est_15_21[, .(age_cat, x2020_2) ] |&gt; \n    setnames(\"x2020_2\", \"count\") |&gt; \n    transform_pop_est()\n\n# 2021\npop21 &lt;- pop_est_15_21[, .(age_cat, x2021_2) ] |&gt; \n    setnames(\"x2021_2\", \"count\") |&gt; \n    transform_pop_est()\n\n\n\n\n\nExcludes census taken in 2011\n\n\nCode\nsource(\"./scripts/transform-pop-csv.R\")\n\npop_est_10_14 &lt;- fread(\"./raw-data/PEA01-Pop-Est-2010-2014.csv\")|&gt; \n    clean_names() |&gt; \n    as.data.table()\n\n# Remove unused columns\npop_est_10_14[, c(\"statistic\", \"sex\", \"unit\") := NULL]\nsetnames(pop_est_10_14, \"value\", \"count\")\n\n# Convert count column to integer \n# First, remove commas\npop_est_10_14[, count := str_remove_all(count, \",\")]\npop_est_10_14[, count := as.numeric(count)][, count := count * 1000]\n\n# Convert year to numeric\npop_est_10_14[, year := as.numeric(year)]\n\n# 2014\n# filter out observations for male and female by extracting \n# rows 1:27\npop14 &lt;- pop_est_10_14[year == 2014, \n                       .(age_group, count)][1:27, ] |&gt; \n    transform_pop_csv()\n# 2013\npop13 &lt;- pop_est_10_14[year == 2013, \n                       .(age_group, count)][1:27, ] |&gt; \n    transform_pop_csv()\n# 2012\npop12 &lt;- pop_est_10_14[year == 2012, \n                       .(age_group, count)][1:27, ] |&gt; \n    transform_pop_csv()\n# 2010\npop10 &lt;- pop_est_10_14[year == 2010, \n                       .(age_group, count)][1:27, ] |&gt; \n    transform_pop_csv()\n\n\n\n\n\n\nMeasure Evaluation\n\n\n\n\nThe table required by Humanity Projects has the age categories as column names (not tidy data format). The first column contains the years from 2010 to 2022.\n\n\nCode\nCSO_cat &lt;- pop11[, age_cat]\npop_mx &lt;- matrix(c(\n    2010, pop10[, count],\n    2011, pop11[, count],\n    2012, pop12[, count],\n    2013, pop13[, count],\n    2014, pop14[, count],\n    2015, pop15[, count],\n    2016, pop16[, count],\n    2017, pop17[, count],\n    2018, pop18[, count],\n    2019, pop19[, count],\n    2020, pop20[, count],\n    2021, pop21[, count],\n    2022, pop22[, count],\n    2023, pop23[, count]\n    ),\n    byrow = TRUE,\n    nrow = 14,\n    dimnames = list(1:14, c(\"Year\", CSO_cat)))\n\npop_table &lt;- as.data.frame(pop_mx)\nwrite_xlsx(pop_table, path = \"./processed-data/Table_4_yearly_pop_counts.xlsx\")\n\n\nSave population counts\n\n\nCode\n# In the \"pop_table\" dataframe, age categories are spread across \n# columns.  The cells contain population counts.  \n# The \"pivot_longer()\" function transposes the age categories into\n# a single column.\nirl_pop &lt;- pop_table |&gt; pivot_longer(cols = !Year, \n                       # reshape every column apart from Years\n                       names_to = \"age_cat\", \n                       values_to = \"pop_count\"\n)\n\nsaveRDS(irl_pop, file = \"./processed-data/irl_pop.rds\")\n# \n# # Cleanup the environment\npop_all &lt;- ls()[sapply(ls(), function(x) is.data.frame(get(x)))]\n# # keep 'age_5yr' vector containing age categories\nremove(list = pop_all)\nrm(get_census, transform_pop, transform_pop_est, transform_pop_csv, pop_all, pop_mx)"
  },
  {
    "objectID": "transform.html#population-by-age-category",
    "href": "transform.html#population-by-age-category",
    "title": "Transform Population and Mortality Counts",
    "section": "",
    "text": "Ten age categories in use by CSO in mortality data:\n“0-4” “5-14” “15-24” “25-34” “35-44” “45-54” “55-64” “65-74” “75+” “Total”\n\n\n\n\n\n\nImport csv file giving numbers of persons by year of age for 2022. /n Transform to 5-year age categories\nsource(\"./scripts/get-census-IE.R\")\nsource(\"./scripts/transform-pop.R\")\n\n# The Census 2022 file, \"FY0068-Pop-2022.csv\", records population \n# by year of age.  All fields are character type.\npop22 &lt;- fread(\"./raw-data/FY006B-Pop-2022.csv\")\n# Convert to 5-year age categories\ncensus22 &lt;- get_census(pop22)\n\n# Convert 5-year categories to CSO groupings\n# Input data contains 17 five-year categories\npop22 &lt;- transform_pop(census22)\n\n# cleanup\nrm(census22)\n\n\n\n\n\n\n\nObtain source data for year 2016 population counts by single year of age. /n Transform to 5-year age categories\n# The Census 2016 file, \"CNA20-Pop-2016.csv\", records population \n# by year of age.  All fields are character type.\n\npop16 &lt;- fread(\"./raw-data/CNA20-Pop-2016.csv\")\n\ncensus16 &lt;- get_census(pop16)\n\n# Population counts are by 5-year categories\n# Convert age categories to HP grouping\n# Source data contains 17 categories\npop16 &lt;- transform_pop(census16)\n\n# cleanup\nrm(census16)\n\n\n\n\n\n\n\nObtain source data for year 2011 population counts by single year of age. /n Transform to 5-year age categories\n# The Census 2011 file, \"CD205-Pop-2016.csv\", records \n# population by year of age.  All fields are character type.\n\npop11 &lt;- fread(\"./raw-data/CD205-Pop-2011.csv\")\n\ncensus11 &lt;- get_census(pop11)\n\n# Population counts are by 5-year categories\n# Convert age categories to HP grouping\n# Source data contains 17 categories\npop11 &lt;- transform_pop(census11)\n\n# cleanup\nrm(census11)\n\n\n\n\n\n\n\n\n\n\nCode\nsource(\"./scripts/transform-pop-csv.R\")\n\npop_est_23 &lt;- fread(\"./raw-data/PEA01-Pop-Est-2023.csv\")|&gt; \n    clean_names() |&gt; \n    as.data.table()\n\n# Remove unused columns\npop_est_23[, c(\"statistic\", \"sex\", \"unit\") := NULL]\nsetnames(pop_est_23, \"value\", \"count\")\n\n# Convert count column to integer \n# First, remove commas\npop_est_23[, count := str_remove_all(count, \",\")]\npop_est_23[, count := as.numeric(count)][, count := count * 1000]\n\n# Convert year to numeric\npop_est_23[, year := as.numeric(year)]\n\npop23 &lt;- pop_est_23[, .(age_group, count)] |&gt; \n    transform_pop_csv()\n\n\n\n\n\n\n\nObtain source data for population estimates by age category for years 2015 to 2021. /n Record estimates in separate numeric vectors for each year\nsource(\"./scripts/transform-pop-est.R\")\n\n# The population estimates file, \"PEA01-Pop-Est-2015-2021.xlsx\", \n# records population by age category up to 85+.  \n\npop_est_15_21 &lt;- read_excel(\"./raw-data/PEA01-Pop-Est-2015-2021.xlsx\",\n                            range = \"A3:H24\") |&gt; \n    clean_names() |&gt; \n    as.data.table()\n\n# First two rows are empty\npop_est_15_21 &lt;- pop_est_15_21[3:21,][, age_cat := x1][, x1 := NULL]\n\n# \"x2015\" records counts in character form.\n# Convert to numeric\n# First remove comma\npop_est_15_21[, x2015 := str_remove_all(x2015, \",\")]\npop_est_15_21[, x2015 := as.numeric(x2015)]\n\npop15 &lt;- pop_est_15_21[, .(age_cat, x2015) ] |&gt; \n    setnames(\"x2015\", \"count\") |&gt; \n    transform_pop_est()\n\n# 2017\npop17 &lt;- pop_est_15_21[, .(age_cat, x2017_2) ] |&gt; \n    setnames(\"x2017_2\", \"count\") |&gt; \n    transform_pop_est()\n\n# 2018\npop18 &lt;- pop_est_15_21[, .(age_cat, x2018_2) ] |&gt; \n    setnames(\"x2018_2\", \"count\") |&gt; \n    transform_pop_est()\n\n# 2019\npop19 &lt;- pop_est_15_21[, .(age_cat, x2019_2) ] |&gt; \n    setnames(\"x2019_2\", \"count\") |&gt; \n    transform_pop_est()\n\n# 2020\npop20 &lt;- pop_est_15_21[, .(age_cat, x2020_2) ] |&gt; \n    setnames(\"x2020_2\", \"count\") |&gt; \n    transform_pop_est()\n\n# 2021\npop21 &lt;- pop_est_15_21[, .(age_cat, x2021_2) ] |&gt; \n    setnames(\"x2021_2\", \"count\") |&gt; \n    transform_pop_est()\n\n\n\n\n\nExcludes census taken in 2011\n\n\nCode\nsource(\"./scripts/transform-pop-csv.R\")\n\npop_est_10_14 &lt;- fread(\"./raw-data/PEA01-Pop-Est-2010-2014.csv\")|&gt; \n    clean_names() |&gt; \n    as.data.table()\n\n# Remove unused columns\npop_est_10_14[, c(\"statistic\", \"sex\", \"unit\") := NULL]\nsetnames(pop_est_10_14, \"value\", \"count\")\n\n# Convert count column to integer \n# First, remove commas\npop_est_10_14[, count := str_remove_all(count, \",\")]\npop_est_10_14[, count := as.numeric(count)][, count := count * 1000]\n\n# Convert year to numeric\npop_est_10_14[, year := as.numeric(year)]\n\n# 2014\n# filter out observations for male and female by extracting \n# rows 1:27\npop14 &lt;- pop_est_10_14[year == 2014, \n                       .(age_group, count)][1:27, ] |&gt; \n    transform_pop_csv()\n# 2013\npop13 &lt;- pop_est_10_14[year == 2013, \n                       .(age_group, count)][1:27, ] |&gt; \n    transform_pop_csv()\n# 2012\npop12 &lt;- pop_est_10_14[year == 2012, \n                       .(age_group, count)][1:27, ] |&gt; \n    transform_pop_csv()\n# 2010\npop10 &lt;- pop_est_10_14[year == 2010, \n                       .(age_group, count)][1:27, ] |&gt; \n    transform_pop_csv()\n\n\n\n\n\n\nMeasure Evaluation\n\n\n\n\nThe table required by Humanity Projects has the age categories as column names (not tidy data format). The first column contains the years from 2010 to 2022.\n\n\nCode\nCSO_cat &lt;- pop11[, age_cat]\npop_mx &lt;- matrix(c(\n    2010, pop10[, count],\n    2011, pop11[, count],\n    2012, pop12[, count],\n    2013, pop13[, count],\n    2014, pop14[, count],\n    2015, pop15[, count],\n    2016, pop16[, count],\n    2017, pop17[, count],\n    2018, pop18[, count],\n    2019, pop19[, count],\n    2020, pop20[, count],\n    2021, pop21[, count],\n    2022, pop22[, count],\n    2023, pop23[, count]\n    ),\n    byrow = TRUE,\n    nrow = 14,\n    dimnames = list(1:14, c(\"Year\", CSO_cat)))\n\npop_table &lt;- as.data.frame(pop_mx)\nwrite_xlsx(pop_table, path = \"./processed-data/Table_4_yearly_pop_counts.xlsx\")\n\n\nSave population counts\n\n\nCode\n# In the \"pop_table\" dataframe, age categories are spread across \n# columns.  The cells contain population counts.  \n# The \"pivot_longer()\" function transposes the age categories into\n# a single column.\nirl_pop &lt;- pop_table |&gt; pivot_longer(cols = !Year, \n                       # reshape every column apart from Years\n                       names_to = \"age_cat\", \n                       values_to = \"pop_count\"\n)\n\nsaveRDS(irl_pop, file = \"./processed-data/irl_pop.rds\")\n# \n# # Cleanup the environment\npop_all &lt;- ls()[sapply(ls(), function(x) is.data.frame(get(x)))]\n# # keep 'age_5yr' vector containing age categories\nremove(list = pop_all)\nrm(get_census, transform_pop, transform_pop_est, transform_pop_csv, pop_all, pop_mx)"
  },
  {
    "objectID": "transform.html#mortality-by-age-category",
    "href": "transform.html#mortality-by-age-category",
    "title": "Transform Population and Mortality Counts",
    "section": "Mortality by Age Category",
    "text": "Mortality by Age Category\n\n2010 - 2023\n\n\nObtain source data for mortality counts by age group for 2010 to 2023. /n Transform to 5-year age categories\nsource(\"./scripts/get-mort-yr.R\")\n\n# The CSO table is in the file \"VSAQ2-Mort-Age-2010-2023.csv\"\n# All fields are character type.\n\nmort &lt;- fread(\"./raw-data/VSAQ2-Mort-Age-2010-2023.csv\") |&gt; \n    clean_names()\n\nmort_yr &lt;- get_mort(mort)\nmort_yr &lt;- mort_yr[order(mort_yr$year)]\n\n\n\nConstruct Excel Table\n\nyear has a distinct column\nage_groups are spread along columns\ncells contain counts\n\n\n\nCode\nmort_table &lt;- pivot_wider(mort_yr, \n            names_from = age_cat, \n            values_from = count) |&gt; \n    as.data.table()\n\nmort_table &lt;- mort_table[order(mort_table$year), ]\nwrite_xlsx(mort_table, path = \"./processed-data/Table_2_yearly_deaths.xlsx\")\n\nmort_table |&gt; \n    gt()\n\n\n\n\n\n\n  \n    \n    \n      year\n      0-4\n      5-14\n      15-24\n      25-34\n      35-44\n      45-54\n      55-64\n      65-74\n      75+\n      Total\n    \n  \n  \n    2010\n327\n55\n261\n449\n703\n1425\n2809\n4803\n16733\n27565\n    2011\n292\n48\n296\n447\n790\n1465\n3026\n5038\n17593\n28995\n    2012\n295\n60\n251\n449\n764\n1434\n2827\n4871\n17897\n28848\n    2013\n275\n58\n215\n411\n634\n1498\n2947\n5186\n18794\n30018\n    2014\n287\n56\n202\n419\n663\n1383\n2816\n5217\n18052\n29095\n    2015\n243\n52\n198\n387\n637\n1341\n2764\n5195\n19135\n29952\n    2016\n189\n34\n167\n336\n616\n1365\n2839\n5506\n19137\n30189\n    2017\n202\n45\n175\n306\n679\n1312\n2739\n5364\n19662\n30484\n    2018\n214\n54\n157\n331\n619\n1346\n2762\n5589\n20044\n31116\n    2019\n219\n45\n153\n305\n673\n1374\n2927\n5615\n19823\n31134\n    2020\n180\n47\n136\n256\n642\n1299\n2765\n5822\n20618\n31765\n    2021\n194\n35\n146\n262\n674\n1447\n2975\n5847\n21475\n33055\n    2022\n210\n42\n175\n340\n659\n1490\n3122\n6117\n23322\n35477\n    2023\n97\n29\n78\n123\n299\n742\n1532\n3151\n12903\n18954\n  \n  \n  \n\n\n\n\nSave mortality data\n\n\nCode\nsaveRDS(mort_yr, file = \"./processed-data/irl_mort.rds\")\n\n\n\n\nQuarterly Totals\n\n\nCode\nsource(\"./scripts/get-mort-qtr.R\")\nmort_qtr &lt;- get_mort_qtr(mort)\n\n\nWarning in `[.data.table`(mort, , `:=`(c(\"statistic\", \"unit\"), NULL)): Column\n'statistic' does not exist to remove\n\n\nWarning in `[.data.table`(mort, , `:=`(c(\"statistic\", \"unit\"), NULL)): Column\n'unit' does not exist to remove\n\n\nCode\nmort_qtr |&gt; \n    gt()\n\n\n\n\n\n\n  \n    \n    \n      quarter\n      Total\n    \n  \n  \n    2023Q2\n8749\n    2023Q1\n10205\n    2022Q4\n8149\n    2022Q3\n8467\n    2022Q2\n9326\n    2022Q1\n9535\n    2021Q4\n8626\n    2021Q3\n8165\n    2021Q2\n6700\n    2021Q1\n9564\n    2020Q4\n7398\n    2020Q3\n7111\n    2020Q2\n8582\n    2020Q1\n8674\n    2019Q4\n7639\n    2019Q3\n7358\n    2019Q2\n7519\n    2019Q1\n8618\n    2018Q4\n7103\n    2018Q3\n7143\n    2018Q2\n7592\n    2018Q1\n9278\n    2017Q4\n7115\n    2017Q3\n6987\n    2017Q2\n7315\n    2017Q1\n9067\n    2016Q4\n6907\n    2016Q3\n7129\n    2016Q2\n7544\n    2016Q1\n8609\n    2015Q4\n6932\n    2015Q3\n6851\n    2015Q2\n7565\n    2015Q1\n8604\n    2014Q4\n6787\n    2014Q3\n7001\n    2014Q2\n7197\n    2014Q1\n8110\n    2013Q4\n7044\n    2013Q3\n6983\n    2013Q2\n7644\n    2013Q1\n8347\n    2012Q4\n6964\n    2012Q3\n6825\n    2012Q2\n7080\n    2012Q1\n7979\n    2011Q4\n6714\n    2011Q3\n6911\n    2011Q2\n7277\n    2011Q1\n8093\n    2010Q4\n6113\n    2010Q3\n6517\n    2010Q2\n6929\n    2010Q1\n8006\n  \n  \n  \n\n\n\n\nCode\n# extract for years 2020 to 2023\nmort_20_23 &lt;- mort_qtr[1:14,]\n\n\n\n\nRIP Data Table\nThe CSO maintains the RIP05 data table which records RIP and registered deaths by quarter for years 2020 - 2023.\n\n\nCode\nrip &lt;- read_excel(\"./raw-data/RIP05-Reg-Deaths-Qtr.xlsx\", \n                  sheet = \"Unpivoted\") |&gt; \n    clean_names() |&gt; \n    setDT()\nrip[, c(\"statistic_label\", \"sex\", \"unit\") := NULL]\nsetnames(rip, \"value\", \"total_rip\")\n\nsetorder(rip, -quarter)\n\n# join tables\nsetkey(mort_20_23, quarter)\nsetkey(rip, quarter)\n# left outer join\nmort_rip &lt;- mort_20_23[rip]\nmort_rip\n\n\n    quarter Total total_rip\n 1:  2020Q1  8674      8919\n 2:  2020Q2  8582      8736\n 3:  2020Q3  7111      7205\n 4:  2020Q4  7398      8301\n 5:  2021Q1  9564     10032\n 6:  2021Q2  6700      7649\n 7:  2021Q3  8165      7887\n 8:  2021Q4  8626      9219\n 9:  2022Q1  9535      8843\n10:  2022Q2  9326      8521\n11:  2022Q3  8467      7859\n12:  2022Q4  8149      9053\n13:  2023Q1 10205      8221\n14:  2023Q2  8749      5932"
  },
  {
    "objectID": "transform.html#eurostat-mortality-data",
    "href": "transform.html#eurostat-mortality-data",
    "title": "Transform Population and Mortality Counts",
    "section": "EuroStat Mortality Data",
    "text": "EuroStat Mortality Data\nThis data is stored in a “wide” format with years (2020-2021) spread across the first row and age (0-99 and over) on the second row.\n\n\nCode\nsource(\"./scripts/get-mort-EStat.R\")\n\nEStat &lt;- read_xlsx(path = \"./raw-data/demo_magec_2010_2021.xlsx\",\n                   sheet = \"Sheet 1\", range = \"B9:AUO12\") |&gt;\n    clean_names() |&gt; \n    setDT() \n# row 2 is empty \nEStat &lt;- EStat[c(1,3), ]\n\nEStat_cat &lt;- get_mort_EStat(EStat)\n\n# Save EuroStat mortality data\nsaveRDS(EStat_cat, file = \"./processed-data/EStat_mort.rds\")"
  },
  {
    "objectID": "explore.html",
    "href": "explore.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "Calculate mortality rates per 100,000 persons for each age category"
  },
  {
    "objectID": "explore.html#mortality-rates",
    "href": "explore.html#mortality-rates",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "Calculate mortality rates per 100,000 persons for each age category"
  },
  {
    "objectID": "explore.html#method-1-deaths-in-excess-of-the-average",
    "href": "explore.html#method-1-deaths-in-excess-of-the-average",
    "title": "Exploratory Data Analysis",
    "section": "Method 1: Deaths in excess of the average",
    "text": "Method 1: Deaths in excess of the average\n\nCompute the average number of deaths from 2015 to 2019, by age category. Calculate difference from average, expressed as a percentage.\n\n\nCode\navg_vec &lt;- irl_mort[year %in% 2015:2019, \n                        floor(mean(mort_count)), \n         by = age_cat ][, V1]\n# extract years 2020 to 2022\nirl_mort_xs &lt;- irl_mort[year %in% 2020:2022, .(year, age_cat, mort_count)]\n\nirl_mort_xs[, mort_xs := (mort_count/avg_vec - 1)*100, by = year] |&gt; \n    head() |&gt; \n    gt()\n\n\n\n\n\n\n  \n    \n    \n      year\n      age_cat\n      mort_count\n      mort_xs\n    \n  \n  \n    2020\n0-4\n180\n-15.492958\n    2020\n5-14\n47\n2.173913\n    2020\n15-24\n136\n-20.000000\n    2020\n25-34\n256\n-23.123123\n    2020\n35-44\n642\n-0.310559\n    2020\n45-54\n1299\n-3.563474\n  \n  \n  \n\n\n\n\n\n\nCode\nirl_mort_xs[, year := as.factor(year)]\nggplot(data=irl_mort_xs, aes(x=age_cat, y=mort_xs, \n                        fill= year)) +\n  geom_bar(stat=\"identity\", position=position_dodge())+\n  scale_fill_brewer(palette=\"Paired\") +\n  scale_y_continuous(labels = scales::percent_format(scale = 1)) +\n  labs(\n      title =\"younger are lower than average\",\n      subtitle = waiver(),\n      caption = \"CSO census, popln estimates, and \\nVSAQ2 mortality by age\",\n      x = \"age category\",\n      y = \"death rate above average\") +\n  annotate(geom = \"text\", x = \"0-4\", y = 15,\n             label = \"Method 1\") +\n  theme_minimal() +\n  theme(legend.position='top', \n        legend.justification='left',\n        legend.direction='horizontal') \n\n\n\n\n\nCode\n# ggsave(\"./figures/method1-diff-avg.jpeg\")\n\n\n\nOutput as Excel Table\n\n\nCode\n# excess_table &lt;- pivot_wider(irl_mort_xs[, .(year, age_cat, mort_xs)], \n#             names_from = year, \n#             values_from = mort_xs)\n# \n# write_xlsx(excess_table, path = \"./processed-data/Table_10_excess_avg.xlsx\")"
  },
  {
    "objectID": "explore.html#method-2a-difference-from-2019-baseline",
    "href": "explore.html#method-2a-difference-from-2019-baseline",
    "title": "Exploratory Data Analysis",
    "section": "Method 2A: Difference from 2019 baseline",
    "text": "Method 2A: Difference from 2019 baseline\nThe baseline level is the 2019 numbers for each age group. Calculate the difference from the baseline, expressed as a percentage.\n\n\nCode\n# Set the base rate from year 2019 values\nbase &lt;- irl_dt[year==2019, rate]\n# Create a baseline vector for the three years 2020 - 2022\nbase &lt;- rep(base, 3)\n\n# Calculate percent change relative to death rate for 2019\nirl_dt[year %in% 2020:2022, \n                       xs_base := round((rate/base-1)*100, 5)]\n\nirl_dt[year %in% 2020:2023,] |&gt; \n    head() |&gt; \n    gt()\n\n\n\n\n\n\n  \n    \n    \n      year\n      age_cat\n      mort_count\n      pop_count\n      rate\n      xs_base\n    \n  \n  \n    2020\n0-4\n180\n309500\n58\n-15.94203\n    2020\n5-14\n47\n694100\n6\n0.00000\n    2020\n15-24\n136\n631100\n21\n-12.50000\n    2020\n25-34\n256\n616200\n41\n-16.32653\n    2020\n35-44\n642\n780200\n82\n-4.65116\n    2020\n45-54\n1299\n674500\n192\n-7.24638\n  \n  \n  \n\n\n\n\n\nConvert to Excel Table\nExtract years 2020 to 2022\n\n\nCode\n# excess_base &lt;- irl_dt[year %in% 2020:2022, .(year, age_cat, xs_base)]\n# \n# excess_table &lt;- pivot_wider(excess_base, names_from = year, \n#             values_from = xs_base)\n# \n# write_xlsx(excess_table, path = \"./processed-data/Table_11_excess_base.xlsx\")"
  },
  {
    "objectID": "explore.html#compare-mortality-rates-by-age-category",
    "href": "explore.html#compare-mortality-rates-by-age-category",
    "title": "Exploratory Data Analysis",
    "section": "Compare mortality rates by age category",
    "text": "Compare mortality rates by age category\n\n\nCode\nirl_20_22 &lt;- irl_dt[year %in% 2020:2022,]\nirl_20_22[, year := as.factor(year)]\nggplot(data=irl_20_22, aes(x=age_cat, y=xs_base, \n                        fill= year)) +\n  geom_bar(stat=\"identity\", position=position_dodge())+\n  scale_fill_brewer(palette=\"Paired\") +\n  scale_y_continuous(labels = scales::percent_format(scale = 1)) +\n  labs(\n  title =\"Younger groups have reduced mortality\",\n  subtitle = waiver(),\n  caption = \"CSO census, popln estimates, and \\nVSAQ2 mortality by age\",\n  x = \"age category\",\n  y = \"death rate above baseline\") +\n    annotate(geom = \"text\", x = \"5-14\", y = 10, \n             label = \"Method 2A\") +\n  theme_minimal() +\n  theme(legend.position='top', \n        legend.justification='left',\n        legend.direction='horizontal') \n\n\n\n\n\nCode\n# ggsave(\"./figures/method2a-xs_base.jpeg\")"
  },
  {
    "objectID": "explore.html#eurostat-mortality-data",
    "href": "explore.html#eurostat-mortality-data",
    "title": "Exploratory Data Analysis",
    "section": "EuroStat Mortality Data",
    "text": "EuroStat Mortality Data\n\n\nCode\nEStat_mort &lt;- readRDS(\"./processed-data/EStat_mort.rds\") |&gt; \n    setDT()\nEStat_mort[, mort_count := count][, count := NULL]\n\nEStat_dt &lt;- irl_pop[1:120, mort_count := EStat_mort$mort_count]\nEStat_dt[, age_cat := as.factor(age_cat)][, Year := as.factor(Year)]\n\nEStat_dt[, rate := mort_count/pop_count * 100000][, rate := floor(rate)]\nEStat_dt |&gt; \n#    head() |&gt; \n    gt()\n\n\n\n\n\n\n  \n    \n    \n      Year\n      age_cat\n      pop_count\n      mort_count\n      rate\n    \n  \n  \n    2010\n0-4\n347000\n27961\n8057\n    2010\n5-14\n610700\n314\n51\n    2010\n15-24\n615700\n48\n7\n    2010\n25-34\n762800\n239\n31\n    2010\n35-44\n681500\n382\n56\n    2010\n45-54\n568300\n656\n115\n    2010\n55-64\n453600\n1339\n295\n    2010\n65-74\n291400\n2657\n911\n    2010\n75+\n223600\n4691\n2097\n    2011\n0-4\n356329\n16634\n4668\n    2011\n5-14\n623261\n28456\n4565\n    2011\n15-24\n580250\n291\n50\n    2011\n25-34\n755067\n43\n5\n    2011\n35-44\n695073\n248\n35\n    2011\n45-54\n579571\n424\n73\n    2011\n55-64\n463308\n693\n149\n    2011\n65-74\n304828\n1337\n438\n    2011\n75+\n230565\n2800\n1214\n    2012\n0-4\n358200\n4747\n1325\n    2012\n5-14\n629800\n17071\n2710\n    2012\n15-24\n566600\n29186\n5151\n    2012\n25-34\n735500\n278\n37\n    2012\n35-44\n699800\n52\n7\n    2012\n45-54\n585900\n215\n36\n    2012\n55-64\n467900\n383\n81\n    2012\n65-74\n314700\n664\n210\n    2012\n75+\n235200\n1394\n592\n    2013\n0-4\n353000\n2789\n790\n    2013\n5-14\n640900\n4794\n748\n    2013\n15-24\n563300\n17893\n3176\n    2013\n25-34\n713200\n29504\n4136\n    2013\n35-44\n707800\n291\n41\n    2013\n45-54\n592900\n59\n9\n    2013\n55-64\n474300\n199\n41\n    2013\n65-74\n328700\n409\n124\n    2013\n75+\n240500\n644\n267\n    2014\n0-4\n345400\n1453\n420\n    2014\n5-14\n652200\n2858\n438\n    2014\n15-24\n567200\n5137\n905\n    2014\n25-34\n688400\n18454\n2680\n    2014\n35-44\n719000\n29252\n4068\n    2014\n45-54\n601800\n264\n43\n    2014\n55-64\n482100\n58\n12\n    2014\n65-74\n341600\n207\n60\n    2014\n75+\n247900\n397\n160\n    2015\n0-4\n337900\n645\n190\n    2015\n5-14\n663700\n1352\n203\n    2015\n15-24\n571600\n2830\n495\n    2015\n25-34\n667900\n5248\n785\n    2015\n35-44\n732800\n18251\n2490\n    2015\n45-54\n612200\n30127\n4921\n    2015\n55-64\n491400\n257\n52\n    2015\n65-74\n354400\n38\n10\n    2015\n75+\n255900\n174\n67\n    2016\n0-4\n331515\n360\n108\n    2016\n5-14\n675037\n635\n94\n    2016\n15-24\n576452\n1378\n239\n    2016\n25-34\n659410\n2787\n422\n    2016\n35-44\n746881\n5299\n709\n    2016\n45-54\n626045\n19199\n3066\n    2016\n55-64\n508958\n30667\n6025\n    2016\n65-74\n373508\n225\n60\n    2016\n75+\n264059\n43\n16\n    2017\n0-4\n324600\n186\n57\n    2017\n5-14\n682400\n306\n44\n    2017\n15-24\n584800\n643\n109\n    2017\n25-34\n640300\n1337\n208\n    2017\n35-44\n757700\n2833\n373\n    2017\n45-54\n636400\n5479\n860\n    2017\n55-64\n516300\n19615\n3799\n    2017\n65-74\n380500\n30317\n7967\n    2017\n75+\n269400\n215\n79\n    2018\n0-4\n319300\n45\n14\n    2018\n5-14\n689500\n143\n20\n    2018\n15-24\n605500\n311\n51\n    2018\n25-34\n626900\n611\n97\n    2018\n35-44\n768200\n1318\n171\n    2018\n45-54\n647900\n2704\n417\n    2018\n55-64\n526400\n5350\n1016\n    2018\n65-74\n393500\n19620\n4986\n    2018\n75+\n280000\n31140\n11121\n    2019\n0-4\n315200\n198\n62\n    2019\n5-14\n693700\n48\n6\n    2019\n15-24\n618000\n159\n25\n    2019\n25-34\n620000\n322\n51\n    2019\n35-44\n776900\n650\n83\n    2019\n45-54\n661600\n1383\n209\n    2019\n55-64\n539700\n2833\n524\n    2019\n65-74\n404100\n5687\n1407\n    2019\n75+\n292200\n19860\n6796\n    2020\n0-4\n309500\n30959\n10002\n    2020\n5-14\n694100\n189\n27\n    2020\n15-24\n631100\n53\n8\n    2020\n25-34\n616200\n130\n21\n    2020\n35-44\n780200\n258\n33\n    2020\n45-54\n674500\n625\n92\n    2020\n55-64\n551600\n1305\n236\n    2020\n65-74\n415000\n2869\n691\n    2020\n75+\n305100\n5602\n1836\n    2021\n0-4\n302600\n19928\n6585\n    2021\n5-14\n693000\n32387\n4673\n    2021\n15-24\n635600\n190\n29\n    2021\n25-34\n608800\n43\n7\n    2021\n35-44\n777800\n141\n18\n    2021\n45-54\n688400\n281\n40\n    2021\n55-64\n563100\n709\n125\n    2021\n65-74\n423500\n1387\n327\n    2021\n75+\n318800\n2820\n884\n    2022\n0-4\n295415\n5899\n1996\n    2022\n5-14\n716872\n20917\n2917\n    2022\n15-24\n644771\n34292\n5318\n    2022\n25-34\n628031\n206\n32\n    2022\n35-44\n794393\n35\n4\n    2022\n45-54\n713507\n157\n22\n    2022\n55-64\n579835\n283\n48\n    2022\n65-74\n441028\n624\n141\n    2022\n75+\n335287\n1465\n436\n    2023\n0-4\n293800\n3155\n1073\n    2023\n5-14\n717800\n6055\n843\n    2023\n15-24\n667200\n22312\n3344\n    2023\n25-34\n645500\nNA\nNA\n    2023\n35-44\n812200\nNA\nNA\n    2023\n45-54\n737200\nNA\nNA\n    2023\n55-64\n601500\nNA\nNA\n    2023\n65-74\n455300\nNA\nNA\n    2023\n75+\n351000\nNA\nNA\n  \n  \n  \n\n\n\n\n\nDeath Rate compared to 2019 Baseline\n\n\nCode\n# Set the base rate from year 2019 values\nbase &lt;- EStat_dt[Year==2019, rate]\n# Create a baseline vector for the two years 2020 - 2021\nbase &lt;- rep(base, 2)\n\n# Calculate difference between yearly death rate and  \n# death rate for 2019 \nEStat_dt[Year %in% 2020:2021, xs_base := round((rate-base)*100, 5)]  \n\nEStat_dt[Year %in% 2020:2021,] |&gt;   \n    head() |&gt; \n    gt()\n\n\n\n\n\n\n  \n    \n    \n      Year\n      age_cat\n      pop_count\n      mort_count\n      rate\n      xs_base\n    \n  \n  \n    2020\n0-4\n309500\n30959\n10002\n994000\n    2020\n5-14\n694100\n189\n27\n2100\n    2020\n15-24\n631100\n53\n8\n-1700\n    2020\n25-34\n616200\n130\n21\n-3000\n    2020\n35-44\n780200\n258\n33\n-5000\n    2020\n45-54\n674500\n625\n92\n-11700"
  },
  {
    "objectID": "explore.html#method-2c-difference-from-linear-trend",
    "href": "explore.html#method-2c-difference-from-linear-trend",
    "title": "Exploratory Data Analysis",
    "section": "Method 2C: Difference from linear trend",
    "text": "Method 2C: Difference from linear trend\n\n\nLinear Fit of Death Rate for years 2010 to 2019\n\n\nCode\nirl_lin_fit &lt;- irl_dt[ year %in% c(2010:2019), ]\n\n# Visualize changes over time\ng0 &lt;- ggplot(irl_lin_fit[age_cat == \"0-4\", ], \n                aes(x = year, y = rate)) + \n  geom_point(size = 3, shape=10)+\n    geom_smooth(method = lm, se=FALSE) +\n    stat_regline_equation(label.x = 2017, label.y = 95,\n        aes(label =  paste(after_stat(rr.label), sep = \"~~~~\"))) +\n  # x-axis breaks for year from 2010 to 2022\n  scale_x_continuous(breaks = 2010:2019) +\n    ggtitle(\"0 to 4 years\")\n\ng5 &lt;- ggplot(irl_lin_fit[age_cat == \"5-14\", ], \n                aes(x = year, y = rate)) + \n  geom_point(size = 3, shape=10)+\n    geom_smooth(method = lm, se=FALSE) +\n    stat_regline_equation(label.x = 2017, label.y = 9,\n        aes(label =  paste(after_stat(rr.label), sep = \"~~~~\"))) +\n  # x-axis breaks for year from 2010 to 2022\n  scale_x_continuous(breaks = 2010:2019) +\n    ggtitle(\"5 to 14 years\")\n\ng15 &lt;- ggplot(irl_lin_fit[age_cat == \"15-24\", ], \n                aes(x = year, y = rate)) + \n  geom_point(size = 3, shape=10)+\n    geom_smooth(method = lm, se=FALSE) +\n    stat_regline_equation(label.x = 2017, label.y = 47,\n        aes(label =  paste(after_stat(rr.label), sep = \"~~~~\"))) +\n  # x-axis breaks for year from 2010 to 2022\n  scale_x_continuous(breaks = 2010:2019) +\n    ggtitle(\"15 to 24 years\")\n\ng25 &lt;- ggplot(irl_lin_fit[age_cat == \"25-34\", ], \n                aes(x = year, y = rate)) + \n  geom_point(size = 3, shape=10)+\n    geom_smooth(method = lm, se=FALSE) +\n    stat_regline_equation(label.x = 2017, label.y = 60,\n        aes(label =  paste(after_stat(rr.label), sep = \"~~~~\"))) +\n  # x-axis breaks for year from 2010 to 2022\n  scale_x_continuous(breaks = 2010:2019) +\n    ggtitle(\"25 to 34 years\")\n\ng35 &lt;- ggplot(irl_lin_fit[age_cat == \"35-44\", ], \n                aes(x = year, y = rate)) + \n  geom_point(size = 3, shape=10)+\n    geom_smooth(method = lm, se=FALSE) +\n    stat_regline_equation(label.x = 2017, label.y = 110,\n        aes(label =  paste(after_stat(rr.label), sep = \"~~~~\"))) +\n  # x-axis breaks for year from 2010 to 2022\n  scale_x_continuous(breaks = 2010:2019) +\n    ggtitle(\"35 to 44 years\")\n\ng45 &lt;- ggplot(irl_lin_fit[age_cat == \"45-54\", ], \n                aes(x = year, y = rate)) + \n  geom_point(size = 3, shape=10)+\n    geom_smooth(method = lm, se=FALSE) +\n    stat_regline_equation(label.x = 2017, label.y = 250,\n        aes(label =  paste(after_stat(rr.label), sep = \"~~~~\"))) +\n  # x-axis breaks for year from 2010 to 2022\n  scale_x_continuous(breaks = 2010:2019) +\n    ggtitle(\"45 to 54 years\")\n\ng55 &lt;- ggplot(irl_lin_fit[age_cat == \"55-64\", ], \n                aes(x = year, y = rate)) + \n  geom_point(size = 3, shape=10)+\n    geom_smooth(method = lm, se=FALSE) +\n    stat_regline_equation(label.x = 2017, label.y = 650,\n        aes(label =  paste(after_stat(rr.label), sep = \"~~~~\"))) +\n  # x-axis breaks for year from 2010 to 2022\n  scale_x_continuous(breaks = 2010:2019) +\n    ggtitle(\"55 to 64 years\")\n\ng65 &lt;- ggplot(irl_lin_fit[age_cat == \"65-74\", ], \n                aes(x = year, y = rate)) + \n  geom_point(size = 3, shape=10)+\n    geom_smooth(method = lm, se=FALSE) +\n    stat_regline_equation(label.x = 2017, label.y = 1650,\n        aes(label =  paste(after_stat(rr.label), sep = \"~~~~\"))) +\n  # x-axis breaks for year from 2010 to 2022\n  scale_x_continuous(breaks = 2010:2019) +\n    ggtitle(\"65 to 74 years\")\n\ng75 &lt;- ggplot(irl_lin_fit[age_cat == \"75+\", ], \n                aes(x = year, y = rate)) + \n  geom_point(size = 3, shape=10)+\n    geom_smooth(method = lm, se=FALSE) +\n    stat_regline_equation(label.x = 2017, label.y = 7800,\n        aes(label =  paste(after_stat(rr.label), sep = \"~~~~\"))) +\n  # x-axis breaks for year from 2010 to 2022\n  scale_x_continuous(breaks = 2010:2019) +\n    ggtitle(\"75 years and over\")\n\n# Remove axis titles from all plots\ng_all &lt;- list(g0,g5, g15, g25, g35, g45, g55, g65, g75) %&gt;% \n    map(~.x + labs(x=NULL, y=NULL))\n\n\nPlot Function\n\n\nCode\n# plotmath expressions\nyleft &lt;- textGrob(expression(paste(\"deaths per 100,000\")), \n                  rot = 90, gp = gpar(fontsize = 20))\n\nbottom &lt;- textGrob(\"years\", gp = gpar(fontsize = 20))\n\n# Lay out plots\nuni &lt;- grid.arrange(grobs=g_all, ncol = 3, nrow = 3, \n                    left = yleft, bottom = bottom)\n\n\n\n\n\nCode\n#save\ng &lt;- arrangeGrob(g0,g5, g15, g25, g35, g45, g55, g65, g75, nrow=3) #generates g\nggsave(file=\"./figures/linear_fit.jpeg\", g) #saves g\n\n\n\n\nLinear Models by age category\n\n\nCode\nnewx &lt;- 2020:2022\nmod0 &lt;- lm(rate ~ year, irl_lin_fit[age_cat == \"0-4\", ])\npredict0 &lt;- predict(mod0, newdata = data.frame(year = newx))\nirl_20_22[age_cat==\"0-4\", lm := predict0]\n\nmod5 &lt;- lm(rate ~ year, irl_lin_fit[age_cat == \"5-14\", ])\npredict5 &lt;- predict(mod5, newdata = data.frame(year = newx))\nirl_20_22[age_cat==\"5-14\", lm := predict5]\n\nmod15 &lt;- lm(rate ~ year, irl_lin_fit[age_cat == \"15-24\", ])\npredict15 &lt;- predict(mod15, newdata = data.frame(year = newx))\nirl_20_22[age_cat==\"15-24\", lm := predict15]\n\nmod25 &lt;- lm(rate ~ year, irl_lin_fit[age_cat == \"25-34\", ])\npredict25 &lt;- predict(mod25, newdata = data.frame(year = newx))\nirl_20_22[age_cat==\"25-34\", lm := predict25]\n\nmod35 &lt;- lm(rate ~ year, irl_lin_fit[age_cat == \"35-44\", ])\npredict35 &lt;- predict(mod35, newdata = data.frame(year = newx))\nirl_20_22[age_cat==\"35-44\", lm := predict35]\n\nmod45 &lt;- lm(rate ~ year, irl_lin_fit[age_cat == \"45-54\", ])\npredict45 &lt;- predict(mod45, newdata = data.frame(year = newx))\nirl_20_22[age_cat==\"45-54\", lm := predict45]\n\nmod55 &lt;- lm(rate ~ year, irl_lin_fit[age_cat == \"55-64\", ])\npredict55 &lt;- predict(mod55, newdata = data.frame(year = newx))\nirl_20_22[age_cat==\"55-64\", lm := predict55]\n\nmod65 &lt;- lm(rate ~ year, irl_lin_fit[age_cat == \"65-74\", ])\npredict65 &lt;- predict(mod65, newdata = data.frame(year = newx))\nirl_20_22[age_cat==\"65-74\", lm := predict65]\n\nmod75 &lt;- lm(rate ~ year, irl_lin_fit[age_cat == \"75+\", ])\npredict75 &lt;- predict(mod75, newdata = data.frame(year = newx))\nirl_20_22[age_cat==\"75+\", lm := predict75]\n\n\nRemove “0-4”, “5-14”, “25-34”, “35-44”, “75+” and Total age category due to low \\(r^2\\) value.\nCalculate difference between death rate and value predicted by linear models, as a percentage\n\n\nCode\nirl_lin &lt;- irl_20_22[ !(age_cat %in% c(\"0-4\", \"5-14\", \"25-34\", \"35-44\", \"75+\", \"Total\") ), ]\n\nirl_lin[,  xs_lin := (rate/lm-1)*100]\n\n\nDifference between death rate and linear model prediction:\n\n\nCode\nggplot(data=irl_lin, aes(x=age_cat, y=xs_lin, \n                        fill= year)) +\n  geom_bar(stat=\"identity\", position=position_dodge())+\n  scale_fill_brewer(palette=\"Paired\") +\n  scale_y_continuous(labels = scales::percent_format(scale = 1)) +\n  labs(\n  title =\"Young Adults ~80% above trend\",\n  subtitle = waiver(),\n  caption = \"CSO census, popln estimates, and \\nVSAQ2 mortality by age\",\n  x = \"age category\",\n  y = \"death rate difference from linear fit\") +\n        annotate(geom = \"text\", x = \"65-74\", y = 20, \n             label = \"Method 2C\") +\n  theme_minimal() +\n  theme(legend.position='top', \n        legend.justification='left',\n        legend.direction='horizontal') \n\n\n\n\n\nCode\n# ggsave(\"./figures/method2c-diff-lin-fit.jpeg\")"
  },
  {
    "objectID": "index.html#method-1-number-of-deaths-above-average",
    "href": "index.html#method-1-number-of-deaths-above-average",
    "title": "Change in Mortality Rates for Ireland",
    "section": "",
    "text": "Figure 1. Deaths above average (2015-2019)\n\n\n\n\n\nFigure 2: Humanity Project deaths above average"
  },
  {
    "objectID": "index.html#method-2a-death-rate-percent-change-from-2019-baseline",
    "href": "index.html#method-2a-death-rate-percent-change-from-2019-baseline",
    "title": "Change in Mortality Rates for Ireland",
    "section": "Method 2A: Death Rate Percent Change from 2019 Baseline",
    "text": "Method 2A: Death Rate Percent Change from 2019 Baseline\n\n\n\n\nFigure 3. Death Rate change from Baseline 2019\n\n\n\n\n\nFigure 4: HP Death Rate from Baseline"
  },
  {
    "objectID": "index.html#method-2c-death-rate-difference-from-linear-fit",
    "href": "index.html#method-2c-death-rate-difference-from-linear-fit",
    "title": "Change in Mortality Rates for Ireland",
    "section": "Method 2C: Death Rate difference from Linear Fit",
    "text": "Method 2C: Death Rate difference from Linear Fit\n\n\nLinear Model Evaluation\n\n\n\nFigure 5. Scatter Plot and Linear Model Fit\n\n\n\n\n\nFigure 6. Death Rate, Linear Fit\n\n\n\n\n\nFigure 7. HP Death Rate from Linear Fit"
  },
  {
    "objectID": "data-sources.html",
    "href": "data-sources.html",
    "title": "Data Sources",
    "section": "",
    "text": "External html script: CSO - Population by year of age, 2011\nRun the R chunk below and select “Download CSV” to the raw-data folder. Enter the file name: CD205-Pop-2016 The file type is csv.\n\nlibrary(htmltools)\nhtmltools::includeHTML(\"./scripts/CD205-Pop-2011.html\")\n\n\n\n\nCSO - Population by year of age, 2016\nRun the R chunk below and select “Download CSV” to the raw-data folder. Enter the file name: CNA20-Pop-2016 The file type is csv.\n\nlibrary(htmltools)\nhtmltools::includeHTML(\"./scripts/CNA20-Pop-2016.html\")\n\n\n\n\nCSO - Population by year of age, 2022\nRun the R chunk below and select “Download CSV” to the raw-data folder. Enter the file name: FY006B-Pop-2022 The file type is csv.\n\nlibrary(htmltools)\nhtmltools::includeHTML(\"./scripts/FY006B-Pop-2022.html\")\n\n\n\n\nRun the html script below and download file to ./raw-data/PEA01-Pop-Est-2023.csv\n\nlibrary(htmltools)\nhtmltools::includeHTML(\"./scripts/PEA01-Pop-Est-2023.html\")\n\n\n\n\nCSO Table PEA01 Population Estimates\nTo download data file, click link below\nEstimated Population classified by Sex and Age Group, 2015 - 2021\nand save the file to the raw-data folder. Enter the file name: PEA01-Pop-Est\nThe file type is xlsx.\n\n\n\nRun the html script below and download file to ./raw-data/PEA01-Pop-Est-2010-2014.csv\n\nlibrary(htmltools)\nhtmltools::includeHTML(\"./scripts/PEA01-Pop-Est-2010-2014.html\")"
  },
  {
    "objectID": "data-sources.html#population",
    "href": "data-sources.html#population",
    "title": "Data Sources",
    "section": "",
    "text": "External html script: CSO - Population by year of age, 2011\nRun the R chunk below and select “Download CSV” to the raw-data folder. Enter the file name: CD205-Pop-2016 The file type is csv.\n\nlibrary(htmltools)\nhtmltools::includeHTML(\"./scripts/CD205-Pop-2011.html\")\n\n\n\n\nCSO - Population by year of age, 2016\nRun the R chunk below and select “Download CSV” to the raw-data folder. Enter the file name: CNA20-Pop-2016 The file type is csv.\n\nlibrary(htmltools)\nhtmltools::includeHTML(\"./scripts/CNA20-Pop-2016.html\")\n\n\n\n\nCSO - Population by year of age, 2022\nRun the R chunk below and select “Download CSV” to the raw-data folder. Enter the file name: FY006B-Pop-2022 The file type is csv.\n\nlibrary(htmltools)\nhtmltools::includeHTML(\"./scripts/FY006B-Pop-2022.html\")\n\n\n\n\nRun the html script below and download file to ./raw-data/PEA01-Pop-Est-2023.csv\n\nlibrary(htmltools)\nhtmltools::includeHTML(\"./scripts/PEA01-Pop-Est-2023.html\")\n\n\n\n\nCSO Table PEA01 Population Estimates\nTo download data file, click link below\nEstimated Population classified by Sex and Age Group, 2015 - 2021\nand save the file to the raw-data folder. Enter the file name: PEA01-Pop-Est\nThe file type is xlsx.\n\n\n\nRun the html script below and download file to ./raw-data/PEA01-Pop-Est-2010-2014.csv\n\nlibrary(htmltools)\nhtmltools::includeHTML(\"./scripts/PEA01-Pop-Est-2010-2014.html\")"
  },
  {
    "objectID": "data-sources.html#mortality",
    "href": "data-sources.html#mortality",
    "title": "Data Sources",
    "section": "Mortality",
    "text": "Mortality\nCSO - Mortality by Age Group and Quarter Year\nRun the R chunk below and select “Download CSV” to the raw-data folder. Enter the file name: VSAQ2-Mort-Age-2010-2023 The file type is automatically set to csv.\n\nlibrary(htmltools)\nhtmltools::includeHTML(\"./scripts/VSAQ2-Mort-Age-2010-2023.html\")\n\nGo to EuroStat demo_magec dataset\nSelect Download &gt;\n&gt; Data on this page only\n&gt; Spreadsheet (.xlsx)\nand save file in raw-data folder"
  },
  {
    "objectID": "data-sources.html#vaccinations",
    "href": "data-sources.html#vaccinations",
    "title": "Data Sources",
    "section": "Vaccinations",
    "text": "Vaccinations"
  }
]