begin_materials[2:4] <- end_materials[1:3]
purchase_materials <- total_materials_reqd - begin_materials
# Cost of $5 per kilogram of materials
cost_per_kg <- structure(rep(x = 5, times = 4),
names=c("Q1", "Q2", "Q3", "Q4") )
cost_purchased <- purchase_materials * cost_per_kg
# Total Annual Cost
annual_cost <- structure(numeric(4), names=c("Q1", "Q2", "Q3", "Q4") )
annual_cost[1] <- sum(cost_purchased)
units_to_produce <- reqd_prod
# Each unit requires 3 kilograms of materials
materials_per_unit <- structure(rep(x = 3, times = 4),
names=c("Q1", "Q2", "Q3", "Q4") )
total_materials <- units_to_produce * materials_per_unit
end_materials <- structure(numeric(4), names=c("Q1", "Q2", "Q3", "Q4") )
# ending raw materials inventory each quarter of 10% of the next quarter's production needs
end_materials[1:3] <- total_materials[2:4] * 0.1
# need 15% of materials in Q1 of next year
end_materials[4] <- 2100
total_materials_reqd <- total_materials + end_materials
total_materials_reqd
units_to_produce <- reqd_prod
# Each unit requires 3 kilograms of materials
materials_per_unit <- structure(rep(x = 3, times = 4),
names=c("Q1", "Q2", "Q3", "Q4") )
total_materials <- units_to_produce * materials_per_unit
end_materials <- structure(numeric(4), names=c("Q1", "Q2", "Q3", "Q4") )
# ending raw materials inventory each quarter of 10% of the next quarter's production needs
end_materials[1:3] <- total_materials[2:4] * 0.1
# need 15% of materials in Q1 of next year
end_materials[4] <- 2100
total_materials_reqd <- total_materials + end_materials
begin_materials <-  structure(numeric(4), names=c("Q1", "Q2", "Q3", "Q4") )
begin_materials[1] <- 1631
begin_materials[2:4] <- end_materials[1:3]
purchase_materials <- total_materials_reqd - begin_materials
# Cost of $5 per kilogram of materials
cost_per_kg <- structure(rep(x = 5, times = 4),
names=c("Q1", "Q2", "Q3", "Q4") )
cost_purchased <- purchase_materials * cost_per_kg
# Total Annual Cost
annual_cost <- structure(numeric(4), names=c("Q1", "Q2", "Q3", "Q4") )
annual_cost[1] <- sum(cost_purchased)
rbind(units_to_produce,
materials_per_unit,
total_materials,
end_materials,
total_materials_reqd,
begin_materials,
purchase_materials,
cost_per_kg,
cost_purchased,
annual_cost) %>%
kbl() %>%
kable_styling()
updateR()
q()
R.version
install.packages("Rtools")
install.packages("workflowr")
install.packages(c("dplyr", "rlang", "stringi"))
library(workflowr)
wflow_git_config(user.name = "JJCoen")
wflow_start(directory = "Scotland-Vaxxed")
knitr::opts_chunk$set(echo = TRUE)
# Load the package required to read JSON files.
library("rjson")
install.packages("rjson")
# Load the package required to read JSON files.
library("rjson")
#| include: false
library(plotly)
library(data.table)
library(janitor)
fig <- plot_ly(x = c(1, 2, 3), y = c(1, 3, 2), type = 'bar')%>%
layout(title = 'A Plotly Figure',
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
data(iris)
fig <- plot_ly(data = iris, x = ~Sepal.Width, y = ~Sepal.Length,
color = ~Species,
type = "scatter", mode = "markers")%>%
layout(title="A Plotly Figure",
legend=list(title=list(text='species')),
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
# line plot
fig1 <- plot_ly(y = c(4, 2, 1), type = "scatter", mode = "lines") %>%
layout(plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
# bar plot
fig2 <- plot_ly(y = c(2, 1, 3), type = "bar") %>%
layout(plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig <- subplot(fig1, fig2)
fig
fig <- plot_ly()%>%
add_trace(x = c(1, 2, 3), y = c(1, 3, 2), type = 'bar') %>%
layout(plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
data(iris)
fig_iris <- plot_ly(data = iris, x = ~Sepal.Width, y = ~Sepal.Length,
color = ~Species,
type = "scatter", mode = "markers")%>%
layout(title="A Plotly Figure",
legend=list(title=list(text='species')),
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig_iris
fig_iris |>
add_trace(x = c(2, 4), y = c(4, 8), type = "scatter",
mode = "lines", line = list(color = 'grey'),
showlegend = FALSE)
library(plotly)
data(iris)
fig <- plot_ly()%>%
add_trace(data = iris, x = ~Sepal.Width, y = ~Sepal.Length, color = ~Species,
type = "scatter", mode = "markers")%>%
layout(title="Using The add_trace() method With A Plotly Figure",  legend=list(title=list(text='species')),
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))%>%
add_trace(x = c(2, 4), y = c(4, 8), type = "scatter", mode = "lines", line = list(color = 'grey')
, showlegend = FALSE)
fig
fig <- plot_ly(x = c(1, 2, 3), y = c(1, 3, 2), type = 'bar')%>%
layout(title = list(text ='Using layout() With Plotly Figures',
font = list(size = 17)),
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
fig <- plot_ly(x = c(1, 2, 3), y = c(1, 3, 2), type = 'bar')%>%
layout(title = list(text ='Using layout() With Plotly Figures',
font = list(size = 27)),
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
fig <- plot_ly(x = c(1, 2, 3), y = c(1, 3, 2), type = 'bar')%>%
layout(title = list(text ='Using layout() With Plotly Figures',
font = list(size = 20)),
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
fig_iris2 <- fig_iris %>%
layout(title = "Updating x axis in a Plotly Figure",
legend=list(title=list(text='species')),
xaxis = list(showgrid = F) )
fig_iris2
setwd("~/MEGA/MEGAsync/Data_Scientist/Public-Sector/Vaccinations/Vax-Ireland")
#| include: false
#| label: load_libraries
library(data.table)
library(kableExtra)
library(gt)
library(tidyverse)
library(ggpubr)
library(grid)     # textGrob
library(gridExtra)
library(janitor)
library(tidyr)
library(writexl)
library(cowplot)
library(purrr)
library(plotly)
# library(scales)    # label_comma()
# library("ggsci")   # Scientific Journal colours
#| include: false
#| label: "mortality rate"
irl_mort <- readRDS(file = "./processed-data/irl_mort.rds") |>
setDT()
irl_mort[, mort_count := count][, count := NULL]
irl_pop <- readRDS(file = "./processed-data/irl_pop.rds") |>
setDT()
# filter out "Total" age category
age_vec <- c("0-4", "5-14", "15-24", "25-34", "35-44", "45-54", "55-64", "65-74", "75+")
irl_pop <- irl_pop[age_cat %in% age_vec,]
irl_mort <- irl_mort[age_cat %in% age_vec, ]
irl_dt <- irl_mort[, pop_count := irl_pop$pop_count]
# convert age category to factor
# irl_dt[, age_cat := as.factor(age_cat)]
# percentage death rate
irl_dt[, rate_pc := mort_count/pop_count *100 ][, rate_pc := round(rate_pc, 5)]
# cleanup
rm(irl_mort, irl_pop)
setcolorder(irl_dt, c("year", "age_cat", "mort_count", "pop_count", "rate_pc"))
irl_dt |>
head() |>
gt()
irl_dt |>
head() |>
gt()
#| label: "excess above average"
# Average number of deaths over five years 2015 to 2019 by age category
avg_vec <- irl_dt[year %in% 2015:2019,
floor(mean(mort_count)),
by = age_cat ][, V1]
# Add column for 5-year average for the 10 years 2010 to 2019
# Insert NA for projected value for years 2020 to 2022
irl_dt[, avg5yr := c(rep(avg_vec, 10), rep(NA, 36))]
# Add column for projected values for years 2020 to 2023
irl_dt[, proj_avg := c(rep(NA, 90), rep(avg_vec, 4))]
irl_dt |>
head() |>
gt()
irl_dt |>
tail() |>
gt()
irl_dt[, unique(year)]
tail(irl_dt)
nrow(irl_dt)
irl_dt
len(unique(irl_dt$year))
length(unique(irl_dt$year))
levels(irl_dt$age_cat)
# Margins
mrg <- list(l = 50, r = 50,
b = 65, t = 95,
pad = 20)
# Specify fonts
f1 <- list(
family = "Lato",
size = 18,
color = "black"
)
f2 <- list(
family = "Lato",
size = 14
)
fig1_num <- irl_dt %>%
plot_ly(x = ~year, y = ~mort_count,
type = "scatter", mode = "lines+markers", name = "Deaths",
color = I("#328cc2"),
line = list(width = 3),
marker = list(size = 9, symbol = 'circle'),
showlegend = TRUE,
transforms = list(
list(
type = 'filter',
target = ~age_cat,
operation = '=',
value = unique(irl_dt$age_cat)[1])),
hoverinfo = "text",
text = ~paste("Deaths: ",
"<br> Year: ", year,
"<br> Deaths, Number: ", mort_count)) |>
add_trace(y = ~avg5yr,
type = "scatter", mode = "lines+markers",
name = "Trend",
color = I("black"),
line = list(width = 3, dash = "dash"),
marker = list(size = 7, symbol = 'circle'),
showlegend = TRUE,
hoverinfo = "text",
text = ~paste("Trend: ",
"<br> Deaths, Number: ", avg5yr) ) |>
add_trace(y = ~proj_avg,
type = "scatter", mode = "lines+markers",
name = "Trend",
color = I("darkblue"),
line = list(width = 3, dash = "dash"),
marker = list(size = 9, symbol = 'square'),
showlegend = TRUE,
hoverinfo = "text",
text = ~paste("Trend: ",
"<br> Deaths, Number: ", proj_avg) ) |>
layout( #title = list(text = "Yearly Mortality by Age Group", font = f1),
yaxis = list( title = 'Yearly Death, Number',
#rangemode = 'tozero',
showline= T, linewidth=2, linecolor='black'),
xaxis = list(title = 'Year', showline= T,
linewidth=2, linecolor='black',
dtick = 2),
#type = 'date', tickformat = "%Y"),
margin = mrg) |>
layout(
legend = list(
x = 0.1, y = -0.25,  # Position the legend at the bottom
orientation = "h",  # Set the orientation to horizontal
title = "Legend Title",
font = list(size = 12) )
) |>
layout(
updatemenus = list(
list(
type = 'dropdown',
active = 0,
y = 1.12,
buttons = list(
list(method = "restyle",
args = list("transforms[0].value",
unique(irl_dt$age_cat)[1]),
label = unique(irl_dt$age_cat)[1]),
list(method = "restyle",
args = list("transforms[0].value",
unique(irl_dt$age_cat)[2]),
label = unique(irl_dt$age_cat)[2]),
list(method = "restyle",
args = list("transforms[0].value",
unique(irl_dt$age_cat)[3]),
label = unique(irl_dt$age_cat)[3]),                     list(method = "restyle",
args = list("transforms[0].value",
unique(irl_dt$age_cat)[4]),
label = unique(irl_dt$age_cat)[4]),                    list(method = "restyle",
args = list("transforms[0].value",
unique(irl_dt$age_cat)[5]),
label = unique(irl_dt$age_cat)[5]),                    list(method = "restyle",
args = list("transforms[0].value",
unique(irl_dt$age_cat)[6]),
label = unique(irl_dt$age_cat)[6]),                    list(method = "restyle",
args = list("transforms[0].value",
unique(irl_dt$age_cat)[7]),
label = unique(irl_dt$age_cat)[7]),                    list(method = "restyle",
args = list("transforms[0].value",
unique(irl_dt$age_cat)[8]),
label = unique(irl_dt$age_cat)[8]),                    list(method = "restyle",
args = list("transforms[0].value",
unique(irl_dt$age_cat)[9]),
label = unique(irl_dt$age_cat)[9])
) ) )
)
fig1_num
# Margins
mrg <- list(l = 50, r = 50,
b = 65, t = 95,
pad = 20)
# Specify fonts
f1 <- list(
family = "Lato",
size = 18,
color = "black"
)
f2 <- list(
family = "Lato",
size = 14
)
fig1_num <- irl_dt %>%
plot_ly(x = ~year, y = ~mort_count,
type = "scatter", mode = "lines+markers", name = "Deaths",
color = I("#328cc2"),
line = list(width = 3),
marker = list(size = 9, symbol = 'circle'),
showlegend = TRUE,
transforms = list(
list(
type = 'filter',
target = ~age_cat,
operation = '=',
value = unique(irl_dt$age_cat)[1])),
hoverinfo = "text",
text = ~paste("Deaths: ",
"<br> Year: ", year,
"-- Deaths, Number: ", mort_count)) |>
add_trace(y = ~avg5yr,
type = "scatter", mode = "lines+markers",
name = "Trend",
color = I("black"),
line = list(width = 3, dash = "dash"),
marker = list(size = 7, symbol = 'circle'),
showlegend = TRUE,
hoverinfo = "text",
text = ~paste("Trend: ",
"<br> Year: ", year,
"Deaths, Number: ", avg5yr) ) |>
add_trace(y = ~proj_avg,
type = "scatter", mode = "lines+markers",
name = "Projected",
color = I("darkblue"),
line = list(width = 3, dash = "dash"),
marker = list(size = 9, symbol = 'square'),
showlegend = TRUE,
hoverinfo = "text",
text = ~paste("Projected: ",
"<br> Year: ", year,
"Deaths, Number: ", proj_avg) ) |>
layout( #title = list(text = "Yearly Mortality by Age Group", font = f1),
yaxis = list( title = 'Yearly Death, Number',
#rangemode = 'tozero',
showline= T, linewidth=2, linecolor='black'),
xaxis = list(title = 'Year', showline= T,
linewidth=2, linecolor='black',
dtick = 2),
#type = 'date', tickformat = "%Y"),
margin = mrg) |>
layout(
legend = list(
x = 0.1, y = -0.25,  # Position the legend at the bottom
orientation = "h",  # Set the orientation to horizontal
title = "Legend Title",
font = list(size = 12) )
) |>
layout(
updatemenus = list(
list(
type = 'dropdown',
active = 0,
y = 1.12,
buttons = list(
list(method = "restyle",
args = list("transforms[0].value",
unique(irl_dt$age_cat)[1]),
label = unique(irl_dt$age_cat)[1]),
list(method = "restyle",
args = list("transforms[0].value",
unique(irl_dt$age_cat)[2]),
label = unique(irl_dt$age_cat)[2]),
list(method = "restyle",
args = list("transforms[0].value",
unique(irl_dt$age_cat)[3]),
label = unique(irl_dt$age_cat)[3]),                     list(method = "restyle",
args = list("transforms[0].value",
unique(irl_dt$age_cat)[4]),
label = unique(irl_dt$age_cat)[4]),                    list(method = "restyle",
args = list("transforms[0].value",
unique(irl_dt$age_cat)[5]),
label = unique(irl_dt$age_cat)[5]),                    list(method = "restyle",
args = list("transforms[0].value",
unique(irl_dt$age_cat)[6]),
label = unique(irl_dt$age_cat)[6]),                    list(method = "restyle",
args = list("transforms[0].value",
unique(irl_dt$age_cat)[7]),
label = unique(irl_dt$age_cat)[7]),                    list(method = "restyle",
args = list("transforms[0].value",
unique(irl_dt$age_cat)[8]),
label = unique(irl_dt$age_cat)[8]),                    list(method = "restyle",
args = list("transforms[0].value",
unique(irl_dt$age_cat)[9]),
label = unique(irl_dt$age_cat)[9])
) ) )
)
fig1_num
# extract years 2020 to 2022
irl_post_vax <- irl_dt[year %in% 2020:2023, .(year, age_cat, mort_count)][, year := as.factor(year)]
# record percent excess compared to average
irl_post_vax[, xs_avg_pc := (mort_count-avg_vec)/avg_vec * 100,
by = year][ ,xs_avg_pc := round(xs_avg_pc, 2)]
# add column for percent of total population vaxxed by year
vax_rates_vec <- c(rep(vax_rates[year==2020, rate], 9),
rep(vax_rates[year==2021, rate], 9),
rep(vax_rates[year==2022, rate], 9),
rep(vax_rates[year==2023, rate], 9) )
