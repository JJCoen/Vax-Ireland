library(tidyverse)
library(plotly)
library(janitor)
library(tidyr)
library(docstring)
library(assertr)    # verify function
library(Hmisc)      # cut2 function
library(readxl)
library(writexl)
#| code-summary: "Import csv file giving numbers of persons by year of age for 2022. /n Transform to 5-year age categories"
source("./scripts/get-census-IE.R")
source("./scripts/transform-pop.R")
# The Census 2022 file, "FY0068-Pop-2022.csv", records population
# by year of age.  All fields are character type.
pop22 <- fread("./raw-data/FY006B-Pop-2022.csv")
# Convert to 5-year age categories
census22 <- get_census(pop22)
# Convert 5-year categories to CSO groupings
# Input data contains 17 five-year categories
pop22 <- transform_pop(census22)
# cleanup
rm(census22)
#| message: false
#| code-summary: "Obtain source data for year 2016 population counts by single year of age. /n Transform to 5-year age categories"
# The Census 2016 file, "CNA20-Pop-2016.csv", records population
# by year of age.  All fields are character type.
pop16 <- fread("./raw-data/CNA20-Pop-2016.csv")
census16 <- get_census(pop16)
# Population counts are by 5-year categories
# Convert age categories to HP grouping
# Source data contains 17 categories
pop16 <- transform_pop(census16)
# cleanup
rm(census16)
#| message: false
#| code-summary: "Obtain source data for year 2011 population counts by single year of age. /n Transform to 5-year age categories"
# The Census 2011 file, "CD205-Pop-2016.csv", records
# population by year of age.  All fields are character type.
pop11 <- fread("./raw-data/CD205-Pop-2011.csv")
census11 <- get_census(pop11)
# Population counts are by 5-year categories
# Convert age categories to HP grouping
# Source data contains 17 categories
pop11 <- transform_pop(census11)
# cleanup
rm(census11)
source("./scripts/transform-pop-csv.R")
pop_est_23 <- fread("./raw-data/PEA01-Pop-Est-2023.csv")|>
clean_names() |>
as.data.table()
# Remove unused columns
pop_est_23[, c("statistic", "sex", "unit") := NULL]
setnames(pop_est_23, "value", "count")
# Convert count column to integer
# First, remove commas
pop_est_23[, count := str_remove_all(count, ",")]
pop_est_23[, count := as.numeric(count)][, count := count * 1000]
# Convert year to numeric
pop_est_23[, year := as.numeric(year)]
pop23 <- pop_est_23[, .(age_group, count)] |>
transform_pop_csv()
#| message: false
#| code-summary: "Obtain source data for population estimates by age category for years 2015 to 2021. /n Record estimates in separate numeric vectors for each year"
source("./scripts/transform-pop-est.R")
# The population estimates file, "PEA01-Pop-Est-2015-2021.xlsx",
# records population by age category up to 85+.
pop_est_15_21 <- read_excel("./raw-data/PEA01-Pop-Est-2015-2021.xlsx",
range = "A3:H24") |>
clean_names() |>
as.data.table()
# First two rows are empty
pop_est_15_21 <- pop_est_15_21[3:21,][, age_cat := x1][, x1 := NULL]
# "x2015" records counts in character form.
# Convert to numeric
# First remove comma
pop_est_15_21[, x2015 := str_remove_all(x2015, ",")]
pop_est_15_21[, x2015 := as.numeric(x2015)]
pop15 <- pop_est_15_21[, .(age_cat, x2015) ] |>
setnames("x2015", "count") |>
transform_pop_est()
# 2017
pop17 <- pop_est_15_21[, .(age_cat, x2017_2) ] |>
setnames("x2017_2", "count") |>
transform_pop_est()
# 2018
pop18 <- pop_est_15_21[, .(age_cat, x2018_2) ] |>
setnames("x2018_2", "count") |>
transform_pop_est()
# 2019
pop19 <- pop_est_15_21[, .(age_cat, x2019_2) ] |>
setnames("x2019_2", "count") |>
transform_pop_est()
# 2020
pop20 <- pop_est_15_21[, .(age_cat, x2020_2) ] |>
setnames("x2020_2", "count") |>
transform_pop_est()
# 2021
pop21 <- pop_est_15_21[, .(age_cat, x2021_2) ] |>
setnames("x2021_2", "count") |>
transform_pop_est()
source("./scripts/transform-pop-csv.R")
pop_est_10_14 <- fread("./raw-data/PEA01-Pop-Est-2010-2014.csv")|>
clean_names() |>
as.data.table()
# Remove unused columns
pop_est_10_14[, c("statistic", "sex", "unit") := NULL]
setnames(pop_est_10_14, "value", "count")
# Convert count column to integer
# First, remove commas
pop_est_10_14[, count := str_remove_all(count, ",")]
pop_est_10_14[, count := as.numeric(count)][, count := count * 1000]
# Convert year to numeric
pop_est_10_14[, year := as.numeric(year)]
# 2014
# filter out observations for male and female by extracting
# rows 1:27
pop14 <- pop_est_10_14[year == 2014,
.(age_group, count)][1:27, ] |>
transform_pop_csv()
# 2013
pop13 <- pop_est_10_14[year == 2013,
.(age_group, count)][1:27, ] |>
transform_pop_csv()
# 2012
pop12 <- pop_est_10_14[year == 2012,
.(age_group, count)][1:27, ] |>
transform_pop_csv()
# 2010
pop10 <- pop_est_10_14[year == 2010,
.(age_group, count)][1:27, ] |>
transform_pop_csv()
CSO_cat <- pop11[, age_cat]
pop_mx <- matrix(c(
2010, pop10[, count],
2011, pop11[, count],
2012, pop12[, count],
2013, pop13[, count],
2014, pop14[, count],
2015, pop15[, count],
2016, pop16[, count],
2017, pop17[, count],
2018, pop18[, count],
2019, pop19[, count],
2020, pop20[, count],
2021, pop21[, count],
2022, pop22[, count],
2023, pop23[, count]
),
byrow = TRUE,
nrow = 14,
dimnames = list(1:14, c("Year", CSO_cat)))
pop_table <- as.data.frame(pop_mx)
write_xlsx(pop_table, path = "./processed-data/Table_4_yearly_pop_counts.xlsx")
# In the "pop_table" dataframe, age categories are spread across
# columns.  The cells contain population counts.
# The "pivot_longer()" function transposes the age categories into
# a single column.
irl_pop <- pop_table |> pivot_longer(cols = !Year,
# reshape every column apart from Years
names_to = "age_cat",
values_to = "pop_count"
)
saveRDS(irl_pop, file = "./processed-data/irl_pop.rds")
#
# # Cleanup the environment
pop_all <- ls()[sapply(ls(), function(x) is.data.frame(get(x)))]
# # keep 'age_5yr' vector containing age categories
remove(list = pop_all)
rm(get_census, transform_pop, transform_pop_est, transform_pop_csv, pop_all, pop_mx)
#| message: false
#| code-summary: "Obtain source data for mortality counts by  age group for 2010 to 2023. /n Transform to 5-year age categories"
source("./scripts/get-mort-yr.R")
# The CSO table is in the file "VSAQ2-Mort-Age-2010-2023.csv"
# All fields are character type.
mort <- fread("./raw-data/VSAQ2-Mort-Age-2010-2023.csv") |>
clean_names()
mort_yr <- get_mort(mort)
mort_yr <- mort_yr[order(mort_yr$year)]
mort_table <- pivot_wider(mort_yr,
names_from = age_cat,
values_from = count) |>
as.data.table()
mort_table <- mort_table[order(mort_table$year), ]
write_xlsx(mort_table, path = "./processed-data/Table_2_yearly_deaths.xlsx")
mort_table |>
gt()
saveRDS(mort_yr, file = "./processed-data/irl_mort.rds")
source("./scripts/get-mort-qtr.R")
mort_qtr <- get_mort_qtr(mort)
rip <- read_excel("./raw-data/RIP05-Reg-Deaths-Qtr.xlsx",
sheet = "Unpivoted") |>
clean_names() |>
setDT()
rip[, c("statistic_label", "sex", "unit") := NULL]
setnames(rip, "value", "total_rip")
setorder(rip, -quarter)
# join tables
setkey(mort_20_23, quarter)
names(mort)
getwd()
#| include: false
#| label: load_libraries
library(data.table)
library(kableExtra)
library(gt)
library(tidyverse)
library(ggpubr)
library(grid)     # textGrob
library(gridExtra)
library(plotly)
library(janitor)
library(tidyr)
library(writexl)
library(cowplot)
library(purrr)
#| include: false
#|
irl_mort <- readRDS(file = "./processed-data/irl_mort.rds") |>
setDT()
irl_mort[, mort_count := count][, count := NULL]
irl_pop <- readRDS(file = "./processed-data/irl_pop.rds") |>
setDT()
irl_dt <- irl_mort[, pop_count := irl_pop$pop_count]
irl_dt[, rate := mort_count/pop_count * 100000][, rate := floor(rate)]
setcolorder(irl_dt, c("year", "age_cat", "mort_count", "pop_count", "rate"))
irl_dt |>
head() |>
gt()
avg_vec <- irl_mort[year %in% 2015:2019,
floor(mean(mort_count)),
by = age_cat ][, V1]
# extract years 2020 to 2022
irl_mort_xs <- irl_mort[year %in% 2020:2022, .(year, age_cat, mort_count)]
irl_mort_xs[, mort_xs := mort_count - avg_vec, by = year] |>
head() |>
gt()
#| message: false
#|
irl_mort_xs[, year := as.factor(year)]
ggplot(data=irl_mort_xs, aes(x=age_cat, y=mort_xs,
fill= year)) +
geom_bar(stat="identity", position=position_dodge())+
scale_fill_brewer(palette="Paired") +
labs(
title ="75+ only group with excess mortality",
subtitle = waiver(),
caption = "CSO census, popln estimates, and \nVSAQ2 mortality by age",
x = "age category",
y = "death rate above average") +
annotate(geom = "text", x = "5-14", y = 4500,
label = "Method 1") +
theme_minimal() +
theme(legend.position='top',
legend.justification='left',
legend.direction='horizontal')
# ggsave("./figures/method1-diff-avg.jpeg")
excess_table <- pivot_wider(irl_mort_xs[, .(year, age_cat, mort_xs)],
names_from = year,
values_from = mort_xs)
write_xlsx(excess_table, path = "./processed-data/Table_10_excess_avg.xlsx")
#| message: false
# Set the base rate from year 2019 values
base <- irl_dt[year==2019, rate]
# Create a baseline vector for the three years 2020 - 2022
base <- rep(base, 3)
# Calculate percent change relative to death rate for 2019
irl_dt[year %in% 2020:2022,
xs_base := round(rate/base - 1, 5)]
irl_dt[year %in% 2020:2023,] |>
head() |>
gt()
excess_base <- irl_dt[year %in% 2020:2022, .(year, age_cat, xs_base)]
excess_table <- pivot_wider(excess_base, names_from = year,
values_from = xs_base)
write_xlsx(excess_table, path = "./processed-data/Table_11_excess_base.xlsx")
#| message: false
#| # Set the base rate from year 2019 values
# Calculate difference between yearly death rate and
# death rate for 2019
irl_dt[year %in% 2020:2022, xs_diff := round(rate - base, 5)]
irl_dt[year %in% 2020:2022,] |>
head() |>
gt()
excess_diff <- irl_dt[year %in% 2020:2022, .(year, age_cat, xs_diff)]
diff_table <- pivot_wider(excess_diff, names_from = year,              values_from = xs_diff)
write_xlsx(diff_table, path = "./processed-data/Table_12_excess_diff.xlsx")
#| message: false
irl_20_22 <- irl_dt[year %in% 2020:2022,]
irl_20_22[, year := as.factor(year)]
ggplot(data=irl_20_22, aes(x=age_cat, y=xs_diff,
fill= year)) +
geom_bar(stat="identity", position=position_dodge())+
scale_fill_brewer(palette="Paired") +
labs(
title ="75+ in 2022: only group with excess mortality",
subtitle = waiver(),
caption = "CSO census, popln estimates, and \nVSAQ2 mortality by age",
x = "age category",
y = "death rate above baseline") +
annotate(geom = "text", x = "5-14", y = 150,
label = "Method 2A") +
theme_minimal() +
theme(legend.position='top',
legend.justification='left',
legend.direction='horizontal')
# ggsave("./figures/method2a-base-diff-cso.jpeg")
EStat_mort <- readRDS("./processed-data/EStat_mort.rds") |>
setDT()
EStat_mort[, mort_count := count][, count := NULL]
EStat_dt <- irl_pop[1:120, mort_count := EStat_mort$mort_count]
EStat_dt[, age_cat := as.factor(age_cat)][, Year := as.factor(Year)]
EStat_dt[, rate := mort_count/pop_count * 100000][, rate := floor(rate)]
head(EStat_dt) |>
head() |>
gt()
#| message: false
#|
# Set the base rate from year 2019 values
base <- EStat_dt[Year==2019, rate]
# Create a baseline vector for the two years 2020 - 2021
base <- rep(base, 2)
# Calculate difference between yearly death rate and
# death rate for 2019
EStat_dt[Year %in% 2020:2021, xs_diff := round(rate - base, 5)]
EStat_dt[Year %in% 2020:2021,] |>
head() |>
gt()
#| message: false
ggplot(EStat_dt[Year %in% 2020:2021,],
aes(x=age_cat, y=xs_diff,
fill= Year)) +
geom_bar(stat="identity", position=position_dodge())+
scale_fill_brewer(palette="Paired") +
labs(
title ="0-4 years: only group with excess mortality",
subtitle = waiver(),
caption = "ESTAT mortality by age dataset DEMO_MAGEC",
x = "age category",
y = "death rate above average") +
theme_minimal() +
annotate(geom = "text", x = "75+", y = 1300,
label = "Method 2A") +
theme(legend.position='top',
legend.justification='left',
legend.direction='horizontal')
# ggsave("./figures/method2a-base-diff-estat.jpeg")
#| warning: false
#| fig-height: 12
irl_lin_fit <- irl_dt[ year %in% c(2010:2019), ]
# Visualize changes over time
g0 <- ggplot(irl_lin_fit[age_cat == "0-4", ],
aes(x = year, y = rate)) +
geom_point(size = 3, shape=10)+
geom_smooth(method = lm, se=FALSE) +
stat_regline_equation(label.x = 2017, label.y = 95,
aes(label =  paste(after_stat(rr.label), sep = "~~~~"))) +
# x-axis breaks for year from 2010 to 2022
scale_x_continuous(breaks = 2010:2019) +
ggtitle("0 to 4 years")
g5 <- ggplot(irl_lin_fit[age_cat == "5-14", ],
aes(x = year, y = rate)) +
geom_point(size = 3, shape=10)+
geom_smooth(method = lm, se=FALSE) +
stat_regline_equation(label.x = 2017, label.y = 9,
aes(label =  paste(after_stat(rr.label), sep = "~~~~"))) +
# x-axis breaks for year from 2010 to 2022
scale_x_continuous(breaks = 2010:2019) +
ggtitle("5 to 14 years")
g15 <- ggplot(irl_lin_fit[age_cat == "15-24", ],
aes(x = year, y = rate)) +
geom_point(size = 3, shape=10)+
geom_smooth(method = lm, se=FALSE) +
stat_regline_equation(label.x = 2017, label.y = 47,
aes(label =  paste(after_stat(rr.label), sep = "~~~~"))) +
# x-axis breaks for year from 2010 to 2022
scale_x_continuous(breaks = 2010:2019) +
ggtitle("15 to 24 years")
g25 <- ggplot(irl_lin_fit[age_cat == "25-34", ],
aes(x = year, y = rate)) +
geom_point(size = 3, shape=10)+
geom_smooth(method = lm, se=FALSE) +
stat_regline_equation(label.x = 2017, label.y = 60,
aes(label =  paste(after_stat(rr.label), sep = "~~~~"))) +
# x-axis breaks for year from 2010 to 2022
scale_x_continuous(breaks = 2010:2019) +
ggtitle("25 to 34 years")
g35 <- ggplot(irl_lin_fit[age_cat == "35-44", ],
aes(x = year, y = rate)) +
geom_point(size = 3, shape=10)+
geom_smooth(method = lm, se=FALSE) +
stat_regline_equation(label.x = 2017, label.y = 110,
aes(label =  paste(after_stat(rr.label), sep = "~~~~"))) +
# x-axis breaks for year from 2010 to 2022
scale_x_continuous(breaks = 2010:2019) +
ggtitle("35 to 44 years")
g45 <- ggplot(irl_lin_fit[age_cat == "45-54", ],
aes(x = year, y = rate)) +
geom_point(size = 3, shape=10)+
geom_smooth(method = lm, se=FALSE) +
stat_regline_equation(label.x = 2017, label.y = 250,
aes(label =  paste(after_stat(rr.label), sep = "~~~~"))) +
# x-axis breaks for year from 2010 to 2022
scale_x_continuous(breaks = 2010:2019) +
ggtitle("45 to 54 years")
g55 <- ggplot(irl_lin_fit[age_cat == "55-64", ],
aes(x = year, y = rate)) +
geom_point(size = 3, shape=10)+
geom_smooth(method = lm, se=FALSE) +
stat_regline_equation(label.x = 2017, label.y = 650,
aes(label =  paste(after_stat(rr.label), sep = "~~~~"))) +
# x-axis breaks for year from 2010 to 2022
scale_x_continuous(breaks = 2010:2019) +
ggtitle("55 to 64 years")
g65 <- ggplot(irl_lin_fit[age_cat == "65-74", ],
aes(x = year, y = rate)) +
geom_point(size = 3, shape=10)+
geom_smooth(method = lm, se=FALSE) +
stat_regline_equation(label.x = 2017, label.y = 1650,
aes(label =  paste(after_stat(rr.label), sep = "~~~~"))) +
# x-axis breaks for year from 2010 to 2022
scale_x_continuous(breaks = 2010:2019) +
ggtitle("65 to 74 years")
g75 <- ggplot(irl_lin_fit[age_cat == "75+", ],
aes(x = year, y = rate)) +
geom_point(size = 3, shape=10)+
geom_smooth(method = lm, se=FALSE) +
stat_regline_equation(label.x = 2017, label.y = 7800,
aes(label =  paste(after_stat(rr.label), sep = "~~~~"))) +
# x-axis breaks for year from 2010 to 2022
scale_x_continuous(breaks = 2010:2019) +
ggtitle("75 years and over")
gT <- ggplot(irl_lin_fit[age_cat == "Total", ],
aes(x = year, y = rate)) +
geom_point(size = 3, shape=10)+
geom_smooth(method = lm, se=FALSE) +
stat_regline_equation(label.x = 2017, label.y = 650,
aes(label =  paste(after_stat(rr.label), sep = "~~~~"))) +
# x-axis breaks for year from 2010 to 2022
scale_x_continuous(breaks = 2010:2019) +
ggtitle("All age groups")
# Remove axis titles from all plots
g_young <- list(g0,g5, g15, g25, g35, g45) %>%
map(~.x + labs(x=NULL, y=NULL))
g_old <- list(g55, g65, g75, gT) %>%
map(~.x + labs(x=NULL, y=NULL))
#| fig-height: 12
#| fig-width: 10
#| message: false
# plotmath expressions
yleft <- textGrob(expression(paste("deaths per 100,000")),
rot = 90, gp = gpar(fontsize = 20))
bottom <- textGrob("years", gp = gpar(fontsize = 20))
# Lay out plots
uni <- grid.arrange(grobs=g_young, ncol = 2, nrow = 3,
left = yleft, bottom = bottom)
#| fig-height: 10
#| fig-width: 10
#| message: false
# Lay out plots
uni <- grid.arrange(grobs=g_old, ncol = 2, nrow = 2,
left = yleft, bottom = bottom)
#| include: false
#|
#   # use custom palette
#  scale_color_manual(values=c("#999999", "#E69F00", "darkblue")) +
newx <- 2020:2022
mod0 <- lm(rate ~ year, irl_lin_fit[age_cat == "0-4", ])
predict0 <- predict(mod0, newdata = data.frame(year = newx))
irl_20_22[age_cat=="0-4", lm := predict0]
mod5 <- lm(rate ~ year, irl_lin_fit[age_cat == "5-14", ])
predict5 <- predict(mod5, newdata = data.frame(year = newx))
irl_20_22[age_cat=="5-14", lm := predict5]
mod15 <- lm(rate ~ year, irl_lin_fit[age_cat == "15-24", ])
predict15 <- predict(mod15, newdata = data.frame(year = newx))
irl_20_22[age_cat=="15-24", lm := predict15]
mod25 <- lm(rate ~ year, irl_lin_fit[age_cat == "25-34", ])
predict25 <- predict(mod25, newdata = data.frame(year = newx))
irl_20_22[age_cat=="25-34", lm := predict25]
mod35 <- lm(rate ~ year, irl_lin_fit[age_cat == "35-44", ])
predict35 <- predict(mod35, newdata = data.frame(year = newx))
irl_20_22[age_cat=="35-44", lm := predict35]
mod45 <- lm(rate ~ year, irl_lin_fit[age_cat == "45-54", ])
predict45 <- predict(mod45, newdata = data.frame(year = newx))
irl_20_22[age_cat=="45-54", lm := predict45]
mod55 <- lm(rate ~ year, irl_lin_fit[age_cat == "55-64", ])
predict55 <- predict(mod55, newdata = data.frame(year = newx))
irl_20_22[age_cat=="55-64", lm := predict55]
mod65 <- lm(rate ~ year, irl_lin_fit[age_cat == "65-74", ])
predict65 <- predict(mod65, newdata = data.frame(year = newx))
irl_20_22[age_cat=="65-74", lm := predict65]
mod75 <- lm(rate ~ year, irl_lin_fit[age_cat == "75+", ])
predict75 <- predict(mod75, newdata = data.frame(year = newx))
irl_20_22[age_cat=="75+", lm := predict75]
irl_lin <- irl_20_22[ age_cat != "Total",]
irl_lin[, xs_lin := rate - lm]
ggplot(data=irl_lin, aes(x=age_cat, y=xs_lin,
fill= year)) +
geom_bar(stat="identity", position=position_dodge())+
scale_fill_brewer(palette="Paired") +
labs(
title ="Disparity in 75+ group",
subtitle = waiver(),
caption = "CSO census, popln estimates, and \nVSAQ2 mortality by age",
x = "age category",
y = "death rate difference from linear fit") +
annotate(geom = "text", x = "5-14", y = 100,
label = "Method 2C") +
theme_minimal() +
theme(legend.position='top',
legend.justification='left',
legend.direction='horizontal')
# ggsave("./figures/method2c-diff-lin-fit.jpeg")
